generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  password            String
  role                Role                 @default(CUSTOMER)
  emailVerified       DateTime?
  verificationToken   String?
  isActive            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]
  blogs               Blog[]
  contentVersions     ContentVersion[]
  couponsCreated      Coupon[]             @relation("CouponCreatedBy")
  couponUsages        CouponUsage[]
  digitalDownloads    DigitalDownload[]
  emailEvents         EmailEvent[]
  emailSequenceUsers  EmailSequenceUser[]
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
  paymentCards        PaymentCard[]
  returns             Return[]
  reviews             Review[]
  Session             Session[]
  wishlistItems       Wishlist[]

  @@index([email])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([email])
  @@index([token])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  name         String
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model PaymentCard {
  id                String   @id @default(cuid())
  userId            String
  cardholderName    String
  lastFourDigits    String
  encryptedCardData String
  encryptedCvv      String?
  expiryMonth       String
  expiryYear        String
  cardType          String
  billingAddressId  String?
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  image       String?
  isActive    Boolean    @default(true)
  metadata    Json?
  blogs       Blog[]
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@index([slug])
}

model Product {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  description       String?
  price             Float
  compareAtPrice    Float?
  sku               String?           @unique
  images            String[]
  categoryId        String?
  tags              String[]
  attributes        Json?
  metadata          Json?
  isActive          Boolean           @default(true)
  featured          Boolean           @default(false)
  stockQuantity     Int               @default(0)
  reservedQuantity  Int               @default(0)
  reorderPoint      Int?
  weight            Float?
  dimensions        Json?
  averageRating     Float?
  reviewCount       Int               @default(0)
  totalSold         Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  barcode           String?
  ageGroup          AgeGroup?
  learningOutcomes  LearningOutcome[]
  productType       ProductType?
  specialCategories SpecialCategory[]
  stemDiscipline    StemCategory      @default(GENERAL)
  orderItems        OrderItem[]
  category          Category?         @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  wishlistItems     Wishlist[]

  @@index([categoryId])
  @@index([isActive])
  @@index([slug])
  @@index([name])
  @@index([price])
  @@index([createdAt])
  @@index([stockQuantity])
  @@index([averageRating])
  @@index([isActive, featured])
  @@index([categoryId, isActive])
  @@index([price, isActive])
  @@index([stockQuantity, isActive])
  @@index([featured, createdAt(sort: Desc)])
  @@index([featured])
  @@index([ageGroup])
  @@index([stemDiscipline])
  @@index([productType])
  @@index([learningOutcomes])
  @@index([specialCategories])
  @@map("Product")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Blog {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  excerpt      String
  content      String
  coverImage   String?
  categoryId   String
  authorId     String
  tags         String[]
  metadata     Json?
  isPublished  Boolean      @default(false)
  publishedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  readingTime  Int?
  stemCategory StemCategory @default(GENERAL)
  author       User         @relation(fields: [authorId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([authorId])
  @@index([stemCategory])
}

model Book {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  author       String
  description  String
  price        Float         @default(50)
  coverImage   String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  metadata     Json?
  isDigital    Boolean       @default(true)
  digitalFiles DigitalFile[]
  orderItems   OrderItem[]
  languages    Language[]    @relation("BookToLanguage")
}

model DigitalFile {
  id        String            @id @default(cuid())
  bookId    String
  fileName  String
  fileUrl   String
  fileSize  Int
  format    String
  language  String
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  downloads DigitalDownload[]
  book      Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, format, language])
  @@index([bookId])
  @@index([format])
  @@index([language])
}

model Language {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique
  nativeName  String?
  isAvailable Boolean @default(true)
  books       Book[]  @relation("BookToLanguage")
}

model Order {
  id                    String        @id @default(cuid())
  orderNumber           String        @unique
  userId                String
  total                 Float
  subtotal              Float
  tax                   Float
  shippingCost          Float
  discountAmount        Float         @default(0)
  couponCode            String?
  couponId              String?
  status                OrderStatus   @default(PROCESSING)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentMethod         String
  notes                 String?
  shippingAddressId     String
  billingAddressId      String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deliveredAt           DateTime?
  stripePaymentIntentId String?
  coupon                Coupon?       @relation(fields: [couponId], references: [id])
  shippingAddress       Address       @relation(fields: [shippingAddressId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])
  items                 OrderItem[]
  returns               Return[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([couponId])
}

model OrderItem {
  id                String                @id @default(cuid())
  orderId           String
  productId         String?
  name              String
  price             Float
  quantity          Int
  returnStatus      OrderItemReturnStatus @default(NONE)
  bookId            String?
  downloadCount     Int                   @default(0)
  downloadExpiresAt DateTime?
  isDigital         Boolean               @default(false)
  maxDownloads      Int                   @default(5)
  downloads         DigitalDownload[]
  book              Book?                 @relation(fields: [bookId], references: [id])
  order             Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           Product?              @relation(fields: [productId], references: [id])
  returns           Return[]
  reviews           Review[]

  @@index([orderId])
  @@index([productId])
  @@index([bookId])
}

model StoreSettings {
  id                  String   @id @default(cuid())
  storeName           String   @default("TechTots")
  storeUrl            String   @default("https://techtots.com")
  storeDescription    String   @default("TechTots is a premier online destination for STEM toys that inspire learning through play.")
  contactEmail        String   @default("info@techtots.com")
  contactPhone        String   @default("+1 (555) 123-4567")
  currency            String   @default("usd")
  timezone            String   @default("america-new_york")
  dateFormat          String   @default("mm-dd-yyyy")
  weightUnit          String   @default("lb")
  metaTitle           String   @default("TechTots | STEM Toys for Curious Minds")
  metaDescription     String   @default("Discover the best STEM toys for curious minds at TechTots. Educational toys that make learning fun for children of all ages.")
  metaKeywords        String   @default("STEM toys, educational toys, science toys, technology toys, engineering toys, math toys")
  shippingSettings    Json?
  paymentSettings     Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  metadata            Json?
  taxSettings         Json?
  businessHours       Json?
  customerService     Json?
  orderProcessing     Json?
  inventoryManagement Json?
  marketingSettings   Json?
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  cls       Float    @default(0)
  fid       Float    @default(0)
  fcp       Float    @default(0)
  lcp       Float    @default(0)
  ttfb      Float    @default(0)
  timestamp DateTime @default(now())
  url       String
  userAgent String   @default("")
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([timestamp])
  @@index([url])
}

model ConversionLog {
  id           String   @id @default(cuid())
  conversionId String   @unique
  type         String
  category     String
  action       String
  elementData  Json
  pageData     Json
  userData     Json
  contextData  Json
  metadata     Json?
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([timestamp])
  @@index([type])
  @@index([category])
  @@index([action])
}

model Return {
  id           String       @id @default(cuid())
  userId       String
  orderId      String
  orderItemId  String
  reason       ReturnReason
  details      String?
  status       ReturnStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  refundError  String?
  refundStatus String?
  order        Order        @relation(fields: [orderId], references: [id])
  orderItem    OrderItem    @relation(fields: [orderItemId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
  @@index([orderItemId])
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  productId   String
  orderItemId String
  rating      Int       @default(0)
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, orderItemId])
  @@index([userId])
  @@index([productId])
  @@index([orderItemId])
}

model Newsletter {
  id         String   @id @default(cuid())
  email      String   @unique
  firstName  String?
  lastName   String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categories String[] @default([])

  @@index([email])
  @@index([isActive])
}

model EmailTemplate {
  id            String              @id @default(cuid())
  name          String
  slug          String              @unique
  subject       String
  content       String
  variables     String[]
  category      String
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     String
  metadata      Json?
  campaigns     EmailCampaign[]
  sequenceSteps EmailSequenceStep[]

  @@index([slug])
  @@index([category])
  @@index([isActive])
}

model EmailCampaign {
  id          String              @id @default(cuid())
  name        String
  description String?
  templateId  String
  subject     String
  content     String
  status      EmailCampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdBy   String
  metadata    Json?
  template    EmailTemplate       @relation(fields: [templateId], references: [id])

  @@index([status])
  @@index([scheduledAt])
  @@index([createdBy])
}

model EmailSequence {
  id            String              @id @default(cuid())
  name          String
  description   String?
  trigger       String
  isActive      Boolean             @default(true)
  maxEmails     Int                 @default(5)
  cooldownHours Int                 @default(24)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     String
  steps         EmailSequenceStep[]
  users         EmailSequenceUser[]

  @@index([trigger])
  @@index([isActive])
  @@index([createdBy])
}

model EmailSequenceStep {
  id         String        @id @default(cuid())
  sequenceId String
  order      Int
  delayHours Int           @default(0)
  templateId String
  subject    String
  content    String
  conditions Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sequence   EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  template   EmailTemplate @relation(fields: [templateId], references: [id])

  @@index([sequenceId])
  @@index([order])
}

model EmailSequenceUser {
  id          String                  @id @default(cuid())
  sequenceId  String
  userId      String
  status      EmailSequenceUserStatus @default(ACTIVE)
  currentStep Int                     @default(0)
  startedAt   DateTime                @default(now())
  completedAt DateTime?
  lastEmailAt DateTime?
  metadata    Json?
  sequence    EmailSequence           @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sequenceId, userId])
  @@index([sequenceId])
  @@index([userId])
  @@index([status])
}

model EmailEvent {
  id         String         @id @default(cuid())
  emailId    String         @unique
  userId     String?
  email      String
  eventType  EmailEventType
  campaignId String?
  sequenceId String?
  templateId String?
  metadata   Json?
  createdAt  DateTime       @default(now())
  user       User?          @relation(fields: [userId], references: [id])

  @@index([emailId])
  @@index([userId])
  @@index([eventType])
  @@index([campaignId])
  @@index([sequenceId])
  @@index([templateId])
  @@index([createdAt])
}

model DigitalDownload {
  id            String      @id @default(cuid())
  orderItemId   String
  userId        String
  digitalFileId String
  downloadToken String      @unique
  expiresAt     DateTime
  downloadedAt  DateTime?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime    @default(now())
  digitalFile   DigitalFile @relation(fields: [digitalFileId], references: [id], onDelete: Cascade)
  orderItem     OrderItem   @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
  @@index([userId])
  @@index([digitalFileId])
  @@index([downloadToken])
  @@index([expiresAt])
}

model Coupon {
  id                String        @id @default(cuid())
  code              String        @unique
  name              String
  description       String?
  type              CouponType    @default(PERCENTAGE)
  value             Float
  minimumOrderValue Float?
  maxDiscountAmount Float?
  maxUses           Int?
  currentUses       Int           @default(0)
  maxUsesPerUser    Int?
  isActive          Boolean       @default(true)
  startsAt          DateTime?
  expiresAt         DateTime?
  isInfluencer      Boolean       @default(false)
  influencerName    String?
  image             String?
  showAsPopup       Boolean       @default(false)
  popupPriority     Int           @default(0)
  createdBy         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  admin             User          @relation("CouponCreatedBy", fields: [createdBy], references: [id])
  usages            CouponUsage[]
  orders            Order[]

  @@index([code])
  @@index([expiresAt])
  @@index([isInfluencer])
  @@index([createdBy])
  @@index([isActive, showAsPopup, popupPriority, expiresAt, startsAt], map: "idx_popup_coupon")
}

model CouponUsage {
  id       String   @id @default(cuid())
  couponId String
  userId   String
  orderId  String?
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([couponId, orderId])
  @@index([couponId])
  @@index([userId])
  @@index([usedAt])
}

model ContentVersion {
  id                String      @id @default(cuid())
  contentId         String
  contentType       ContentType
  version           Int
  title             String
  content           Json
  changeDescription String?
  createdBy         String
  createdAt         DateTime    @default(now())
  isPublished       Boolean     @default(false)
  creator           User        @relation(fields: [createdBy], references: [id])

  @@unique([contentId, contentType, version])
  @@index([contentId, contentType])
  @@index([createdBy])
  @@index([createdAt])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



enum OrderItemReturnStatus {
  NONE
  REQUESTED
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

enum Role {
  CUSTOMER
  ADMIN
}

enum StemCategory {
  SCIENCE
  TECHNOLOGY
  ENGINEERING
  MATHEMATICS
  GENERAL
}

enum ContentType {
  BLOG
  PRODUCT
  CATEGORY
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReturnReason {
  DOES_NOT_MEET_EXPECTATIONS
  DAMAGED_OR_DEFECTIVE
  WRONG_ITEM_SHIPPED
  CHANGED_MIND
  ORDERED_WRONG_PRODUCT
  OTHER
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum AgeGroup {
  TODDLERS_1_3
  PRESCHOOL_3_5
  ELEMENTARY_6_8
  MIDDLE_SCHOOL_9_12
  TEENS_13_PLUS
}

enum LearningOutcome {
  PROBLEM_SOLVING
  CREATIVITY
  CRITICAL_THINKING
  MOTOR_SKILLS
  LOGIC
}

enum ProductType {
  ROBOTICS
  PUZZLES
  CONSTRUCTION_SETS
  EXPERIMENT_KITS
  BOARD_GAMES
}

enum SpecialCategory {
  NEW_ARRIVALS
  BEST_SELLERS
  GIFT_IDEAS
  SALE_ITEMS
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  SPAM_REPORTED
  FAILED
}

enum EmailSequenceUserStatus {
  ACTIVE
  PAUSED
  COMPLETED
  UNSUBSCRIBED
  FAILED
}


